name: CI Pipeline

on:
  workflow_call:
    inputs:
      ENV: 
        type: string
      WEBAPP_NAME:
        required: true
        type: string  
      DOTNET_VERSION:
        type: string
      SOLUTION_FILE_PATH:
        required: true
        type: string      
    secrets:
      token:
        required: true

jobs:
  DotNet_Build:
    runs-on: ubuntu-latest

    outputs:
      build_version: ${{ steps.version.outputs.build_version }}
      
    steps:
    - uses: actions/checkout@v3
    
    - name: setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ inputs.DOTNET_VERSION }}
      
    - name: Restore Dependencies
      run: dotnet restore

    - name: Build ${{ inputs.WEBAPP_NAME }}
      run: dotnet build  ${{ inputs.SOLUTION_FILE_PATH }}/${{ inputs.WEBAPP_NAME }}.sln --configuration Release

    - name: Run Linters
      run: dotnet format ${{ inputs.SOLUTION_FILE_PATH }}/${{ inputs.WEBAPP_NAME }}.sln --severity error --verify-no-changes --verbosity diagnostic --no-restore

    - name: Install and Run Security-Scan
      run: dotnet tool install --global security-scan  && security-scan ${{ inputs.SOLUTION_FILE_PATH }}/${{ inputs.WEBAPP_NAME }}.sln  --excl-proj=**/*Test*/** --export=security_report.sarif

    - name: Upload Security Report
      uses: actions/upload-artifact@v3
      with:
        name: security_report.sarif
        path: security_report.sarif

    - name: Dotnet Publish
      run: dotnet publish  ${{ inputs.SOLUTION_FILE_PATH }}/${{ inputs.WEBAPP_NAME }}.sln -c Release -o /tmp/${{ inputs.WEBAPP_NAME }} --no-build
        
    - name: Set Build Version
      id: version
      run: |
        echo "build_version=${{ inputs.WEBAPP_NAME }}-`grep '<Version>' < ${{ inputs.SOLUTION_FILE_PATH }}/${{ inputs.WEBAPP_NAME }}.csproj | sed 's/.*<Version>\(.*\)<\/Version>/\1/'`-${{ github.run_id }}-$(date +%d-%m-%Y-%H%M%S)" >> $GITHUB_OUTPUT |
        echo "build_version=${{ inputs.WEBAPP_NAME }}-`grep '<Version>' < ${{ inputs.SOLUTION_FILE_PATH }}/${{ inputs.WEBAPP_NAME }}.csproj | sed 's/.*<Version>\(.*\)<\/Version>/\1/'`-${{ github.run_id }}-${{ github.run_id }}-$(date +%d-%m-%Y-%H%M%S)" >> $GITHUB_ENV
    
    # - name: Test with environment variables
    #   run: echo "$build_version  and ${{ env.build_version }}"

    - name: Upload Artifact for Deployment Job
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.build_version }}
        path: /tmp/${{ inputs.WEBAPP_NAME }}

    # - name: Perform CodeQL Analysis
    #   uses: github/codeql-action/analyze@v2
    #   with:
    #     category: "/language: [ 'csharp', 'javascript', 'cpp', 'csharp' ]"
     
  DevDeploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs:  [DotNet_Build]
    steps:
    - name: Debug
      run: echo "yet not ${{needs.DotNet_Build.outputs.build_version}}"
      # with:
      #   BUILD_VERSION: ${{needs.DotNet_Build.outputs.build_version}}
      
    - name: Download The Release Artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{needs.DotNet_Build.outputs.build_version}}
        path: /tmp

    - name: Dev Deploy
      run: echo "yet not started"
